{"meta":{"title":"平凡的人生","subtitle":null,"description":null,"author":"潘正炼","url":"http://blog.panzhenglian.com"},"pages":[{"title":"categories","date":"2017-05-10T02:15:06.000Z","updated":"2017-06-01T08:12:05.000Z","comments":true,"path":"categories/index.html","permalink":"http://blog.panzhenglian.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-05-15T16:49:39.000Z","updated":"2017-05-29T18:03:30.000Z","comments":false,"path":"tags/index.html","permalink":"http://blog.panzhenglian.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Android 代号、标记和细分版本 (Build) 号","slug":"Android-代号、标记和细分版本-Build-号","date":"2017-06-27T07:13:57.000Z","updated":"2017-06-27T07:20:40.000Z","comments":true,"path":"2017/06/27/Android-代号、标记和细分版本-Build-号/","link":"","permalink":"http://blog.panzhenglian.com/2017/06/27/Android-代号、标记和细分版本-Build-号/","excerpt":"","text":"官网链接：https://source.android.com/source/build-numbers 代号、标记和细分版本 (Build) 号简要来说，Android 的开发是围绕着版本系列进行的，这些版本使用美味的点心名字（按字母顺序）作为代号。 平台代号、版本、API 级别和 NDK 版本 为方便起见，代号与以下版本号、API 级别和 NDK 版本相对应： 代号版本API 级别Nougat7.1API 级别 25Nougat7.0API 级别 24Marshmallow6.0API 级别 23Lollipop5.1API 级别 22Lollipop5.0API 级别 21KitKat4.4-4.4.4API 级别 19Jelly Bean4.3.xAPI 级别 18Jelly Bean4.2.xAPI 级别 17Jelly Bean4.1.xAPI 级别 16Ice Cream Sandwich4.0.3-4.0.4API 级别 15，NDK 8Ice Cream Sandwich4.0.1-4.0.2API 级别 14，NDK 7Honeycomb3.2.xAPI 级别 13Honeycomb3.1API 级别 12，NDK 6Honeycomb3.0API 级别 11Gingerbread2.3.3-2.3.7API 级别 10Gingerbread2.3-2.3.2API 级别 9，NDK 5Froyo2.2.xAPI 级别 8，NDK 4Eclair2.1API 级别 7，NDK 3Eclair2.0.1API 级别 6Eclair2.0API 级别 5Donut1.6API 级别 4，NDK 2Cupcake1.5API 级别 3，NDK 1（无代号）1.1API 级别 2（无代号）1.0API 级别 1","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.panzhenglian.com/tags/Android/"}]},{"title":"ffmpeg Video to GIF","slug":"ffmpeg-Video-to-GIF","date":"2017-05-23T05:16:26.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2017/05/23/ffmpeg-Video-to-GIF/","link":"","permalink":"http://blog.panzhenglian.com/2017/05/23/ffmpeg-Video-to-GIF/","excerpt":"","text":"安装ffmpegbrew install ffmpeg 视频转gifffmpeg -i in.mp4 out.gif# 插入字幕-vf#输出RGB24位颜色gif图片-pix_fmt rgb24 #输出分辨率-s 320x240#帧率-r 10#截取，第五秒开始，截取10秒,下面两个命令是一样的-ss 5 -t 10-ss 00:00:05 -t 10 视频属性调整#缩放视频尺寸 ,-1代表保持长宽比-vf scale=360:-1#加倍速播放视频-filter:v &quot;setpts=0.5*PTS&quot;#慢倍速播放视频-filter:v &quot;setpts=2.0*PTS&quot;#移除视频中的音频-an","categories":[],"tags":[{"name":"Video","slug":"Video","permalink":"http://blog.panzhenglian.com/tags/Video/"}]},{"title":"Android animated-vector 小例子","slug":"Android-animated-vector-小例子","date":"2017-05-22T10:17:46.000Z","updated":"2017-06-07T03:37:07.000Z","comments":true,"path":"2017/05/22/Android-animated-vector-小例子/","link":"","permalink":"http://blog.panzhenglian.com/2017/05/22/Android-animated-vector-小例子/","excerpt":"","text":"Android 从5.0开始引入 VectorDrawable，用于实现矢量图。默认情况下，Android L 之前的版本并不支持 vector 标签，但是在 com.android.support:appcompat-v7:23.2.0以上的包中，Google 对vector进行了部分兼容。以下内容，均为兼容 api14以上的代码。 引入appcompat,我这里引入的是25.3.1 compile &quot;com.android.support:appcompat-v7:25.3.1&quot; 在 Module的 build.gradle 文件中，加入 vectorDrawables.useSupportLibrary = true 如果不加的话，只能兼容静态 vector 标签，而且兼容方式是通过生成位图来做的，在 L版本以前的设备会使用工程生成的 png文件，L版本以后不受影响，但是apk 体积会增大。 编写vector,这里写一个播放图标效果,静态效果如下,文件名svg_flash_play.xml &lt;vector xmlns:android=\"http://schemas.android.com/apk/res/android\" android:width=\"25dp\" android:height=\"25dp\" android:viewportHeight=\"50.0\" android:viewportWidth=\"50.0\"&gt; &lt;path android:name=\"p1\" android:pathData=\"M12 ,38 v-28\" android:strokeColor=\"#fff\" android:strokeWidth=\"4\" /&gt; &lt;path android:name=\"p2\" android:pathData=\"M21 ,38 v-30\" android:strokeColor=\"#fff\" android:strokeWidth=\"4\" android:trimPathEnd=\"0.4\" /&gt; &lt;path android:name=\"p3\" android:pathData=\"M29 ,38 v-34\" android:strokeColor=\"#fff\" android:strokeWidth=\"4\" /&gt; &lt;path android:name=\"p4\" android:pathData=\"M38 ,38 v-32\" android:strokeColor=\"#fff\" android:strokeWidth=\"4\" android:trimPathEnd=\"0.45\" /&gt;&lt;/vector&gt; 编写animated-vector，animated-vector 可以看作是一个关联动画与vector适配器,文件名：animation_svg_play.xml &lt;animated-vector xmlns:android=\"http://schemas.android.com/apk/res/android\" android:drawable=\"@drawable/svg_flash_play\"&gt; &lt;target android:name=\"p1\" android:animation=\"@animator/anim_p1\"/&gt; &lt;target android:name=\"p2\" android:animation=\"@animator/anim_p2\"/&gt; &lt;target android:name=\"p3\" android:animation=\"@animator/anim_p3\"/&gt; &lt;target android:name=\"p4\" android:animation=\"@animator/anim_p4\"/&gt;&lt;/animated-vector&gt; drawable属性关联需要执行动画的vector，这里写之前的vector文件。 这里的四个 target 对应四个属性动画，四个文件差不多，这里只贴其中之一,anim_p1.xml &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;objectAnimator xmlns:android=\"http://schemas.android.com/apk/res/android\" android:duration=\"300\" android:propertyName=\"trimPathEnd\" android:repeatCount=\"infinite\" android:repeatMode=\"reverse\" android:valueFrom=\"1\" android:valueTo=\"0.3\" /&gt; 属性讲解： propertyName ：对应要执行动画的属性名，这里写的 trimPathEnd,该属性是 vector 下 path 标签的属性,属性取值范围：0-1 repeatMode 有两个取值，reverse和restart，代表反转与重新开始执行动画。 valueFrom 起始值，这里写的1，对应之前 propertyName=&quot;trimPathEnd&quot;,动画开始的时候，第一条线是 画满的， valueTo 结束值，这里写的0.3，对应之前 propertyName=&quot;trimPathEnd&quot;,第一次动画结束时，第一条线会只画到0.3的长度。 设置在 ImageView 中设置 app:srcCompat=&quot;@drawable/animation_svg_play&quot; 即可，不能直接用 android:src,这样会报错的。代码中开启动画: ImageView imageView = (ImageView) findViewById(R.id.image_view);Drawable drawable = imageView.getDrawable();if (drawable instanceof Animatable)&#123; ((Animatable) drawable).start();&#125; 如果需要在java 代码中设置图片，可以这么写 AnimatedVectorDrawableCompat animatedVectorDrawableCompat = AnimatedVectorDrawableCompat.create( getContext(), R.drawable.animation_svg_play);imageView.setImageDrawable(animatedVectorDrawableCompat); 效果代码已提交 github","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.panzhenglian.com/tags/Android/"}]},{"title":"Android Studio Logcat颜色","slug":"Android-Studio-Logcat颜色","date":"2017-05-21T07:02:30.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2017/05/21/Android-Studio-Logcat颜色/","link":"","permalink":"http://blog.panzhenglian.com/2017/05/21/Android-Studio-Logcat颜色/","excerpt":"","text":"Assert#AA66CCDebug#33B5E5Error#FF4444Info#99CC00Verbose#FFFFFFWarning#FFBB33效果如下","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.panzhenglian.com/tags/Android/"}]},{"title":"分享hexo时序图和流程图插件","slug":"分享hexo时序图和流程图插件","date":"2017-05-20T16:16:09.000Z","updated":"2017-06-19T06:34:56.000Z","comments":true,"path":"2017/05/21/分享hexo时序图和流程图插件/","link":"","permalink":"http://blog.panzhenglian.com/2017/05/21/分享hexo时序图和流程图插件/","excerpt":"","text":"流程图 hexo 插件地址：https://github.com/bubkoo/hexo-filter-flowchart 基于https://github.com/adrai/flowchart.js 例子 flowst=&gt;start: Start|past:&gt;http://www.google.com[blank]e=&gt;end: End:&gt;http://www.google.comop1=&gt;operation: My Operation|pastop2=&gt;operation: Stuff|currentsub1=&gt;subroutine: My Subroutine|invalidcond=&gt;condition: Yesor No?|approved:&gt;http://www.google.comc2=&gt;condition: Good idea|rejectedio=&gt;inputoutput: catch something...|requesttruest-&gt;op1(right)-&gt;condcond(yes, right)-&gt;c2cond(no)-&gt;sub1(left)-&gt;op1c2(yes)-&gt;io-&gt;ec2(no)-&gt;op2-&gt;e 效果如下 时序图 hexo 插件地址：https://www.npmjs.com/package/hexo-filter-sequence 基于https://github.com/bramp/js-sequence-diagrams 例子 sequenceAlice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 效果如下 Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks!{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"sequence-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-0-options\").value)); var diagram = Diagram.parse(code); diagram.drawSVG(\"sequence-0\", options);","categories":[],"tags":[]},{"title":"开源 NAS 操作系统","slug":"开源-NAS-操作系统","date":"2017-05-15T16:17:41.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2017/05/16/开源-NAS-操作系统/","link":"","permalink":"http://blog.panzhenglian.com/2017/05/16/开源-NAS-操作系统/","excerpt":"","text":"FreeNAS®，目前最受欢迎的开源免费 NAS 操作系统之一，基于以安全和稳定著称的 FreeBSD 系统开发，由 ixsystems 公司的技术团队维护。项目地址：http://www.freenas.org NAS4Free，基于 FreeNAS 0.7 开发的一个分支，由原 FreeNAS 系统开发者发起创建。许多恋旧的朋友忠实的跟随，安装要求没有 FreeNAS 高，版本更新也很及时。项目地址：http://www.nas4free.org OpenMediaVault，由原 FreeNAS 核心开发成员 Volker Theile 发起的基于 Debian Linux 的开源 NAS 操作系统，主要面向家庭用户和小型办公环境，最近发布了针对树莓派的安装包，值得关注。项目地址：http://www.openmediavault.org Openfiler，另一款基于浏览器管理的开源 NAS 操作系统，许多人说他好用，因为它基于 rPath Linux 开发。2013年以后，这款 NAS 系统的开源版本再没有更新。项目地址：http://www.openfiler.com NexentaStor，基于 OpenSolaris 开发，与 FreeNAS 一样采用强大的 ZFS 文件系统。该系统由 Nexenta Systems 公司技术团队维护，同时提供社区开原版和商业付费版本，社区开原版有 18TB 的存储容量限制，有人说 NexentaStor 比 OpenFiler 好用。项目地址：http://www.nexentastor.org RockStor，一款基于 Linux 的开源 NAS 系统，采用企业级文件系统 BTRFS，提供 SMB/CIFS、NFS 以及 SFTP 常见的共享方式。第一个 ISO 镜像发布于 2014-10-02，可见这套 NAS 系统初出茅庐，暂无简体中文支持。不过官网文档已经备齐，保持关注，可能有一番作为。项目地址：http://rockstor.com EasyNAS，另一款非常年轻的 NAS 系统，与 RockStor 很像，同样采用企业级文件系统 BTRFS，但官方网站和文档会略逊一筹，第一个 ISO 镜像发布于 2014-05-10。项目地址：http://www.easynas.org NASLite-2，是少数基于 Linux 的商用 NAS 操作系统，由 Server Elements 公司出品，需要支付29.95 美元才能下载 ISO 镜像文件。项目地址：http://www.serverelements.com/?target=NASLite-2 NanoNAS，同样出自 Server Elements 公司，它是 NASLite-2 的精简版，需支付 9.95 美元才可以下载 ISO 镜像文件。项目地址：http://www.serverelements.com/?target=NanoNAS CryptoNAS，以前叫做CryptoBox，是一个专注于磁盘加密的项目，提供基于 Linux 的 LiveCD，整合了 NAS 服务器加密功能，此外，也提供了安装包，可直接安装到现有 Linux 服务器上，为磁盘加密提供友好的浏览器管理界面。项目地址：http://cryptonas.senselab.org Webmin，它不是 NAS 操作系统，但可以实现基本的 samba 共享功能，webmin 是目前功能最强大的基于浏览器的 Unix 系统管理工具。可以安装在几乎所有的类 Unix 操作系统上面。特别适合刚入门的用户管理 Linux 服务器。项目地址：http://www.webmin.cn GlusterFS，由 Z RESEARCH 公司负责开发，最近非常活跃。 文档也比较齐全，不难上手。GlusterFS 通过 Infiniband RDMA 或 TCP/IP 协议将多台廉价的 x86 主机，通过网络互联成一个并行的网络文件系统。据说 Gluster 已被 RedHat 收购，求证实。项目地址：http://www.gluster.org Lustre®，为解决海量存储问题而设计的全新文件系统。是下一代的集群文件系统，可支持10,000个节点，PB的存储量，100GB/S的传输速度，完美的安全性和可管理性。 目前Lustre已经运用在一些领域，例如HP SFS产品等。项目地址：http://lustre.org","categories":[],"tags":[{"name":"NAS","slug":"NAS","permalink":"http://blog.panzhenglian.com/tags/NAS/"}]},{"title":"Android冷门知识","slug":"Android冷门知识","date":"2017-05-15T07:23:43.000Z","updated":"2017-06-26T03:18:30.000Z","comments":true,"path":"2017/05/15/Android冷门知识/","link":"","permalink":"http://blog.panzhenglian.com/2017/05/15/Android冷门知识/","excerpt":"","text":"记录日常开发中冷门知识，随意而写，未整理 RecyclerViewRecyclerView 的 Layoutmanager 可以直接申明在 xml 中,具体代码可查看RecyclerView.createLayoutManager 方法. &lt;android.support.v7.widget.RecyclerView android:id=\"@+id/recycler_view\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:layout_marginTop=\"30dp\" android:scrollbars=\"none\" app:layoutManager=\"LinearLayoutManager\" /&gt;&lt;declare-styleable name=\"RecyclerView\"&gt; &lt;!-- Class name of the Layout Manager to be used. &lt;p/&gt; The class must extend android.support.v7.widget.RecyclerView$LayoutManager and have either a default constructor or constructor with the signature (android.content.Context, android.util.AttributeSet, int, int). &lt;p/&gt; If the name starts with a '.', application package is prefixed. Else, if the name contains a '.', the classname is assumed to be a full class name. Else, the recycler view package name (android.support.v7.widget) is prefixed. --&gt; &lt;attr name=\"layoutManager\" format=\"string\" /&gt; &lt;!-- ============================= --&gt; &lt;!-- Attributes for Layout Manager --&gt; &lt;!-- ============================= --&gt; &lt;eat-comment /&gt; &lt;attr name=\"android:orientation\" /&gt; &lt;attr name=\"spanCount\" format=\"integer\"/&gt; &lt;attr name=\"reverseLayout\" format=\"boolean\" /&gt; &lt;attr name=\"stackFromEnd\" format=\"boolean\" /&gt;&lt;/declare-styleable&gt; Layout允许嵌套内部控件超出父布局 android:clipChildren=”false” 允许嵌套内部控件在padding间距中显示 android:clipToPadding=”false” ScrollView 内部嵌套有ListView ，会默认定位到ListView的第一条位置，解决方案： 在ScroollView 内第一个布局添加 android:descendantFocusability=”blocksDescendants” 如果ScroolView 中有 EditText ，会导致其无法获取焦点，另一种做法： 在ScroollView 内第一个布局添加 android:focusableInTouchMode=”true”，(ScroollView 的第一个子布局也是它的唯一子布局) EditTextandroid:digits，限定输入字符，例如：只允许 数字、字母以及部分特殊符号输入android:digits=&quot;0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos;_- &quot;","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.panzhenglian.com/tags/Android/"}]},{"title":"ADB常用命令","slug":"ADB常用命令","date":"2017-05-08T16:00:00.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2017/05/09/ADB常用命令/","link":"","permalink":"http://blog.panzhenglian.com/2017/05/09/ADB常用命令/","excerpt":"","text":"转载自：https://github.com/mzlogin/awesome-adbADB，即 Android Debug Bridge，它是 Android 开发/测试人员不可替代的强大工具，也是 Android 设备玩家的好玩具。 持续更新中，欢迎提 PR 和 Issue 补充指正，觉得有用的可以将 此 GitHub 仓库 Star 收藏备用。 注： 有部分命令的支持情况可能与 Android 系统版本及定制 ROM 的实现有关。 Other languages: :gb: English 基本用法命令语法adb 命令的基本语法如下： adb [-d|-e|-s &lt;serialNumber&gt;] &lt;command&gt; 如果只有一个设备/模拟器连接时，可以省略掉 [-d|-e|-s &lt;serialNumber&gt;] 这一部分，直接使用 adb &lt;command&gt;。 为命令指定目标设备如果有多个设备/模拟器连接，则需要为命令指定目标设备。 参数 含义 -d 指定当前唯一通过 USB 连接的 Android 设备为命令目标 -e 指定当前唯一运行的模拟器为命令目标 -s &lt;serialNumber&gt; 指定相应 serialNumber 号的设备/模拟器为命令目标 在多个设备/模拟器连接的情况下较常用的是 -s &lt;serialNumber&gt; 参数，serialNumber 可以通过 adb devices 命令获取。如： $ adb devicesList of devices attachedcf264b8f deviceemulator-5554 device10.129.164.6:5555 device 输出里的 cf264b8f、emulator-5554 和 10.129.164.6:5555 即为 serialNumber。 比如这时想指定 cf264b8f 这个设备来运行 adb 命令获取屏幕分辨率： adb -s cf264b8f shell wm size 又如想给 10.129.164.6:5555 这个设备安装应用（这种形式的 serialNumber 格式为 &lt;IP&gt;:&lt;Port&gt;，一般为无线连接的设备或 Genymotion 等第三方 Android 模拟器）： adb -s 10.129.164.6:5555 install test.apk 遇到多设备/模拟器的情况均使用这几个参数为命令指定目标设备，下文中为简化描述，不再重复。 启动/停止启动 adb server 命令： adb start-server （一般无需手动执行此命令，在运行 adb 命令时若发现 adb server 没有启动会自动调起。） 停止 adb server 命令： adb kill-server 查看 adb 版本命令： adb version 示例输出： Android Debug Bridge version 1.0.36Revision 8f855a3d9b35-android 以 root 权限运行 adbdadb 的运行原理是 PC 端的 adb server 与手机端的守护进程 adbd 建立连接，然后 PC 端的 adb client 通过 adb server 转发命令，adbd 接收命令后解析运行。 所以如果 adbd 以普通权限执行，有些需要 root 权限才能执行的命令无法直接用 adb xxx 执行。这时可以 adb shell 然后 su 后执行命令，也可以让 adbd 以 root 权限执行，这个就能随意执行高权限命令了。 命令： adb root 正常输出： restarting adbd as root 现在再运行 adb shell，看看命令行提示符是不是变成 # 了？ 有些手机 root 后也无法通过 adb root 命令让 adbd 以 root 权限执行，比如三星的部分机型，会提示 adbd cannot run as root in production builds，此时可以先安装 adbd Insecure，然后 adb root 试试。 相应地，如果要恢复 adbd 为非 root 权限的话，可以使用 adb unroot 命令。 指定 adb server 的网络端口命令： adb -P &lt;port&gt; start-server 默认端口为 5037。 设备连接管理查询已连接设备/模拟器命令： adb devices 输出示例： List of devices attachedcf264b8f deviceemulator-5554 device10.129.164.6:5555 device 输出格式为 [serialNumber] [state]，serialNumber 即我们常说的 SN，state 有如下几种： offline —— 表示设备未连接成功或无响应。 device —— 设备已连接。注意这个状态并不能标识 Android 系统已经完全启动和可操作，在设备启动过程中设备实例就可连接到 adb，但启动完毕后系统才处于可操作状态。 no device —— 没有设备/模拟器连接。 以上输出显示当前已经连接了三台设备/模拟器，cf264b8f、emulator-5554 和 10.129.164.6:5555 分别是它们的 SN。从 emulator-5554 这个名字可以看出它是一个 Android 模拟器，而 10.129.164.6:5555 这种形为 &lt;IP&gt;:&lt;Port&gt; 的 serialNumber 一般是无线连接的设备或 Genymotion 等第三方 Android 模拟器。 常见异常输出： 没有设备/模拟器连接成功。 List of devices attached 设备/模拟器未连接到 adb 或无响应。 List of devices attachedcf264b8f offline USB 连接通过 USB 连接来正常使用 adb 需要保证几点： 硬件状态正常。 包括 Android 设备处于正常开机状态，USB 连接线和各种接口完好。 Android 设备的开发者选项和 USB 调试模式已开启。 可以到「设置」-「开发者选项」-「Android 调试」查看。 如果在设置里找不到开发者选项，那需要通过一个彩蛋来让它显示出来：在「设置」-「关于手机」连续点击「版本号」7 次。 设备驱动状态正常。 这一点貌似在 Linux 和 Mac OS X 下不用操心，在 Windows 下有可能遇到需要安装驱动的情况，确认这一点可以右键「计算机」-「属性」，到「设备管理器」里查看相关设备上是否有黄色感叹号或问号，如果没有就说明驱动状态已经好了。否则可以下载一个手机助手类程序来安装驱动先。 通过 USB 线连接好电脑和设备后确认状态。 adb devices 如果能看到 xxxxxx device 说明连接成功。 无线连接（需要借助 USB 线）除了可以通过 USB 连接设备与电脑来使用 adb，也可以通过无线连接——虽然连接过程中也有需要使用 USB 的步骤，但是连接成功之后你的设备就可以在一定范围内摆脱 USB 连接线的限制啦！ 操作步骤： 将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。 将设备与电脑通过 USB 线连接。 应确保连接成功（可运行 adb devices 看是否能列出该设备）。 让设备在 5555 端口监听 TCP/IP 连接： adb tcpip 5555 断开 USB 连接。 找到设备的 IP 地址。 一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 查看设备信息 - IP 地址 一节里的方法用 adb 命令来查看。 通过 IP 地址连接设备。 adb connect &lt;device-ip-address&gt; 这里的 &lt;device-ip-address&gt; 就是上一步中找到的设备 IP 地址。 确认连接状态。 adb devices 如果能看到 &lt;device-ip-address&gt;:5555 device 说明连接成功。 如果连接不了，请确认 Android 设备与电脑是连接到了同一个 WiFi，然后再次执行 adb connect &lt;device-ip-address&gt; 那一步； 如果还是不行的话，通过 adb kill-server 重新启动 adb 然后从头再来一次试试。 断开无线连接 命令： adb disconnect &lt;device-ip-address&gt; 无线连接（无需借助 USB 线）注：需要 root 权限。 上一节「无线连接（需要借助 USB 线）」是官方文档里介绍的方法，需要借助于 USB 数据线来实现无线连接。 既然我们想要实现无线连接，那能不能所有步骤下来都是无线的呢？答案是能的。 在 Android 设备上安装一个终端模拟器。 已经安装过的设备可以跳过此步。我使用的终端模拟器下载地址是：Terminal Emulator for Android Downloads 将 Android 设备与要运行 adb 的电脑连接到同一个局域网，比如连到同一个 WiFi。 打开 Android 设备上的终端模拟器，在里面依次运行命令： susetprop service.adb.tcp.port 5555 找到 Android 设备的 IP 地址。 一般能在「设置」-「关于手机」-「状态信息」-「IP地址」找到，也可以使用下文里 查看设备信息 - IP 地址 一节里的方法用 adb 命令来查看。 在电脑上通过 adb 和 IP 地址连接 Android 设备。 adb connect &lt;device-ip-address&gt; 这里的 &lt;device-ip-address&gt; 就是上一步中找到的设备 IP 地址。 如果能看到 connected to &lt;device-ip-address&gt;:5555 这样的输出则表示连接成功。 节注一： 有的设备，比如小米 5S + MIUI 8.0 + Android 6.0.1 MXB48T，可能在第 5 步之前需要重启 adbd 服务，在设备的终端模拟器上运行： restart adbd 如果 restart 无效，尝试以下命令： start adbdstop adbd 应用管理查看应用列表查看应用列表的基本命令格式是 adb shell pm list packages [-f] [-d] [-e] [-s] [-3] [-i] [-u] [--user USER_ID] [FILTER] 即在 adb shell pm list packages 的基础上可以加一些参数进行过滤查看不同的列表，支持的过滤参数如下： 参数 显示列表 无 所有应用 -f 显示应用关联的 apk 文件 -d 只显示 disabled 的应用 -e 只显示 enabled 的应用 -s 只显示系统应用 -3 只显示第三方应用 -i 显示应用的 installer -u 包含已卸载应用 &lt;FILTER&gt; 包名包含 &lt;FILTER&gt; 字符串 所有应用命令： adb shell pm list packages 输出示例： package:com.android.smoketestpackage:com.example.android.livecubespackage:com.android.providers.telephonypackage:com.google.android.googlequicksearchboxpackage:com.android.providers.calendarpackage:com.android.providers.mediapackage:com.android.protipspackage:com.android.documentsuipackage:com.android.gallerypackage:com.android.externalstorage...// other packages here... 系统应用命令： adb shell pm list packages -s 第三方应用命令： adb shell pm list packages -3 包名包含某字符串的应用比如要查看包名包含字符串 mazhuang 的应用列表，命令： adb shell pm list packages mazhuang 当然也可以使用 grep 来过滤： adb shell pm list packages | grep mazhuang 安装 APK命令格式： adb install [-lrtsdg] &lt;path_to_apk&gt; 参数： adb install 后面可以跟一些可选参数来控制安装 APK 的行为，可用参数及含义如下： 参数 含义 -l 将应用安装到保护目录 /mnt/asec -r 允许覆盖安装 -t 允许安装 AndroidManifest.xml 里 application 指定 android:testOnly=&quot;true&quot; 的应用 -s 将应用安装到 sdcard -d 允许降级覆盖安装 -g 授予所有运行时权限 运行命令后如果见到类似如下输出（状态为 Success）代表安装成功： [100%] /data/local/tmp/1.apktruepkg: /data/local/tmp/1.apkSuccess 上面是当前最新版 v1.0.36 的 adb 的输出，会显示 push apk 文件到手机的进度百分比。 使用旧版本 adb 的输出则是这样的： 12040 KB/s (22205609 bytes in 1.801s) pkg: /data/local/tmp/SogouInput_android_v8.3_sweb.apkSuccess 而如果状态为 Failure 则表示安装失败，比如： [100%] /data/local/tmp/map-20160831.apk pkg: /data/local/tmp/map-20160831.apkFailure [INSTALL_FAILED_ALREADY_EXISTS] 常见安装失败输出代码、含义及可能的解决办法如下： 输出 含义 解决办法 INSTALL_FAILED_ALREADY_EXISTS 应用已经存在，或卸载了但没卸载干净 adb install 时使用 -r 参数，或者先 adb uninstall &lt;packagename&gt; 再安装 INSTALL_FAILED_INVALID_APK 无效的 APK 文件 INSTALL_FAILED_INVALID_URI 无效的 APK 文件名 确保 APK 文件名里无中文 INSTALL_FAILED_INSUFFICIENT_STORAGE 空间不足 清理空间 INSTALL_FAILED_DUPLICATE_PACKAGE 已经存在同名程序 INSTALL_FAILED_NO_SHARED_USER 请求的共享用户不存在 INSTALL_FAILED_UPDATE_INCOMPATIBLE 以前安装过同名应用，但卸载时数据没有移除 先 adb uninstall &lt;packagename&gt; 再安装 INSTALL_FAILED_SHARED_USER_INCOMPATIBLE 请求的共享用户存在但签名不一致 INSTALL_FAILED_MISSING_SHARED_LIBRARY 安装包使用了设备上不可用的共享库 INSTALL_FAILED_REPLACE_COULDNT_DELETE 替换时无法删除 INSTALL_FAILED_DEXOPT dex 优化验证失败或空间不足 INSTALL_FAILED_OLDER_SDK 设备系统版本低于应用要求 INSTALL_FAILED_CONFLICTING_PROVIDER 设备里已经存在与应用里同名的 content provider INSTALL_FAILED_NEWER_SDK 设备系统版本高于应用要求 INSTALL_FAILED_TEST_ONLY 应用是 test-only 的，但安装时没有指定 -t 参数 INSTALL_FAILED_CPU_ABI_INCOMPATIBLE 包含不兼容设备 CPU 应用程序二进制接口的 native code INSTALL_FAILED_MISSING_FEATURE 应用使用了设备不可用的功能 INSTALL_FAILED_CONTAINER_ERROR 1. sdcard 访问失败; 2. 应用签名与 ROM 签名一致，被当作内置应用 1. 确认 sdcard 可用，或者安装到内置存储; 2. 打包时不与 ROM 使用相同签名 INSTALL_FAILED_INVALID_INSTALL_LOCATION 1. 不能安装到指定位置; 2. 应用签名与 ROM 签名一致，被当作内置应用 1. 切换安装位置，添加或删除 -s 参数; 2. 打包时不与 ROM 使用相同签名 INSTALL_FAILED_MEDIA_UNAVAILABLE 安装位置不可用 一般为 sdcard，确认 sdcard 可用或安装到内置存储 INSTALL_FAILED_VERIFICATION_TIMEOUT 验证安装包超时 INSTALL_FAILED_VERIFICATION_FAILURE 验证安装包失败 INSTALL_FAILED_PACKAGE_CHANGED 应用与调用程序期望的不一致 INSTALL_FAILED_UID_CHANGED 以前安装过该应用，与本次分配的 UID 不一致 清除以前安装过的残留文件 INSTALL_FAILED_VERSION_DOWNGRADE 已经安装了该应用更高版本 使用 -d 参数 INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE 已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限 INSTALL_PARSE_FAILED_NOT_APK 指定路径不是文件，或不是以 .apk 结尾 INSTALL_PARSE_FAILED_BAD_MANIFEST 无法解析的 AndroidManifest.xml 文件 INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION 解析器遇到异常 INSTALL_PARSE_FAILED_NO_CERTIFICATES 安装包没有签名 INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES 已安装该应用，且签名与 APK 文件不一致 先卸载设备上的该应用，再安装 INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING 解析 APK 文件时遇到 CertificateEncodingException INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME manifest 文件里没有或者使用了无效的包名 INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID manifest 文件里指定了无效的共享用户 ID INSTALL_PARSE_FAILED_MANIFEST_MALFORMED 解析 manifest 文件时遇到结构性错误 INSTALL_PARSE_FAILED_MANIFEST_EMPTY 在 manifest 文件里找不到找可操作标签（instrumentation 或 application） INSTALL_FAILED_INTERNAL_ERROR 因系统问题安装失败 INSTALL_FAILED_USER_RESTRICTED 用户被限制安装应用 INSTALL_FAILED_DUPLICATE_PERMISSION 应用尝试定义一个已经存在的权限名称 INSTALL_FAILED_NO_MATCHING_ABIS 应用包含设备的应用程序二进制接口不支持的 native code INSTALL_CANCELED_BY_USER 应用安装需要在设备上确认，但未操作设备或点了取消 在设备上同意安装 INSTALL_FAILED_ACWF_INCOMPATIBLE 应用程序与设备不兼容 does not contain AndroidManifest.xml 无效的 APK 文件 is not a valid zip file 无效的 APK 文件 Offline 设备未连接成功 先将设备与 adb 连接成功 unauthorized 设备未授权允许调试 error: device not found 没有连接成功的设备 先将设备与 adb 连接成功 protocol failure 设备已断开连接 先将设备与 adb 连接成功 Unknown option: -s Android 2.2 以下不支持安装到 sdcard 不使用 -s 参数 No space left on devicerm 空间不足 清理空间 Permission denied … sdcard … sdcard 不可用 参考：PackageManager.java adb install 内部原理简介 adb install 实际是分三步完成： push apk 文件到 /data/local/tmp。 调用 pm install 安装。 删除 /data/local/tmp 下的对应 apk 文件。 所以，必要的时候也可以根据这个步骤，手动分步执行安装过程。 卸载应用命令： adb uninstall [-k] &lt;packagename&gt; &lt;packagename&gt; 表示应用的包名，-k 参数可选，表示卸载应用但保留数据和缓存目录。 命令示例： adb uninstall com.qihoo360.mobilesafe 表示卸载 360 手机卫士。 清除应用数据与缓存命令： adb shell pm clear &lt;packagename&gt; &lt;packagename&gt; 表示应用名包，这条命令的效果相当于在设置里的应用信息界面点击了「清除缓存」和「清除数据」。 命令示例： adb shell pm clear com.qihoo360.mobilesafe 表示清除 360 手机卫士的数据和缓存。 查看前台 Activity命令： adb shell dumpsys activity activities | grep mFocusedActivity 输出示例： mFocusedActivity: ActivityRecord&#123;8079d7e u0 com.cyanogenmod.trebuchet/com.android.launcher3.Launcher t42&#125; 其中的 com.cyanogenmod.trebuchet/com.android.launcher3.Launcher 就是当前处于前台的 Activity。 查看正在运行的 Services命令： adb shell dumpsys activity services [&lt;packagename&gt;] &lt;packagename&gt; 参数不是必须的，指定 &lt;packagename&gt; 表示查看与某个包名相关的 Services，不指定表示查看所有 Services。 &lt;packagename&gt; 不一定要给出完整的包名，比如运行 adb shell dumpsys activity services org.mazhuang，那么包名 org.mazhuang.demo1、org.mazhuang.demo2 和 org.mazhuang123 等相关的 Services 都会列出来。 与应用交互主要是使用 am &lt;command&gt; 命令，常用的 &lt;command&gt; 如下： command 用途 start [options] &lt;INTENT&gt; 启动 &lt;INTENT&gt; 指定的 Activity startservice [options] &lt;INTENT&gt; 启动 &lt;INTENT&gt; 指定的 Service broadcast [options] &lt;INTENT&gt; 发送 &lt;INTENT&gt; 指定的广播 force-stop &lt;packagename&gt; 停止 &lt;packagename&gt; 相关的进程 &lt;INTENT&gt; 参数很灵活，和写 Android 程序时代码里的 Intent 相对应。 用于决定 intent 对象的选项如下： 参数 含义 -a &lt;ACTION&gt; 指定 action，比如 android.intent.action.VIEW -c &lt;CATEGORY&gt; 指定 category，比如 android.intent.category.APP_CONTACTS -n &lt;COMPONENT&gt; 指定完整 component 名，用于明确指定启动哪个 Activity，如 com.example.app/.ExampleActivity &lt;INTENT&gt; 里还能带数据，就像写代码时的 Bundle 一样： 参数 含义 --esn &lt;EXTRA_KEY&gt; null 值（只有 key 名） `-e –es ` string 值 --ez &lt;EXTRA_KEY&gt; &lt;EXTRA_BOOLEAN_VALUE&gt; boolean 值 --ei &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt; integer 值 --el &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt; long 值 --ef &lt;EXTRA_KEY&gt; &lt;EXTRA_FLOAT_VALUE&gt; float 值 --eu &lt;EXTRA_KEY&gt; &lt;EXTRA_URI_VALUE&gt; URI --ecn &lt;EXTRA_KEY&gt; &lt;EXTRA_COMPONENT_NAME_VALUE&gt; component name --eia &lt;EXTRA_KEY&gt; &lt;EXTRA_INT_VALUE&gt;[,&lt;EXTRA_INT_VALUE...] integer 数组 --ela &lt;EXTRA_KEY&gt; &lt;EXTRA_LONG_VALUE&gt;[,&lt;EXTRA_LONG_VALUE...] long 数组 调起 Activity命令格式： adb shell am start [options] &lt;INTENT&gt; 例如： adb shell am start -n com.tencent.mm/.ui.LauncherUI 表示调起微信主界面。 adb shell am start -n org.mazhuang.boottimemeasure/.MainActivity --es \"toast\" \"hello, world\" 表示调起 org.mazhuang.boottimemeasure/.MainActivity 并传给它 string 数据键值对 toast - hello, world。 调起 Service命令格式： adb shell am startservice [options] &lt;INTENT&gt; 例如： adb shell am startservice -n com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService 表示调起微信的某 Service。 发送广播命令格式： adb shell am broadcast [options] &lt;INTENT&gt; 可以向所有组件广播，也可以只向指定组件广播。 例如，向所有组件广播 BOOT_COMPLETED： adb shell am broadcast -a android.intent.action.BOOT_COMPLETED 又例如，只向 org.mazhuang.boottimemeasure/.BootCompletedReceiver 广播 BOOT_COMPLETED： adb shell am broadcast -a android.intent.action.BOOT_COMPLETED -n org.mazhuang.boottimemeasure/.BootCompletedReceiver 这类用法在测试的时候很实用，比如某个广播的场景很难制造，可以考虑通过这种方式来发送广播。 既能发送系统预定义的广播，也能发送自定义广播。如下是部分系统预定义广播及正常触发时机： action 触发时机 android.net.conn.CONNECTIVITY_CHANGE 网络连接发生变化 android.intent.action.SCREEN_ON 屏幕点亮 android.intent.action.SCREEN_OFF 屏幕熄灭 android.intent.action.BATTERY_LOW 电量低，会弹出电量低提示框 android.intent.action.BATTERY_OKAY 电量恢复了 android.intent.action.BOOT_COMPLETED 设备启动完毕 android.intent.action.DEVICE_STORAGE_LOW 存储空间过低 android.intent.action.DEVICE_STORAGE_OK 存储空间恢复 android.intent.action.PACKAGE_ADDED 安装了新的应用 android.net.wifi.STATE_CHANGE WiFi 连接状态发生变化 android.net.wifi.WIFI_STATE_CHANGED WiFi 状态变为启用/关闭/正在启动/正在关闭/未知 android.intent.action.BATTERY_CHANGED 电池电量发生变化 android.intent.action.INPUT_METHOD_CHANGED 系统输入法发生变化 android.intent.action.ACTION_POWER_CONNECTED 外部电源连接 android.intent.action.ACTION_POWER_DISCONNECTED 外部电源断开连接 android.intent.action.DREAMING_STARTED 系统开始休眠 android.intent.action.DREAMING_STOPPED 系统停止休眠 android.intent.action.WALLPAPER_CHANGED 壁纸发生变化 android.intent.action.HEADSET_PLUG 插入耳机 android.intent.action.MEDIA_UNMOUNTED 卸载外部介质 android.intent.action.MEDIA_MOUNTED 挂载外部介质 android.os.action.POWER_SAVE_MODE_CHANGED 省电模式开启 （以上广播均可使用 adb 触发） 强制停止应用命令： adb shell am force-stop &lt;packagename&gt; 命令示例： adb shell am force-stop com.qihoo360.mobilesafe 表示停止 360 安全卫士的一切进程与服务。 文件管理复制设备里的文件到电脑命令： adb pull &lt;设备里的文件路径&gt; [电脑上的目录] 其中 电脑上的目录 参数可以省略，默认复制到当前目录。 例： adb pull /sdcard/sr.mp4 ~/tmp/ 小技巧：设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 adb shell 和 su 命令在 adb shell 里获取 root 权限后，先 cp /path/on/device /sdcard/filename 将文件复制到 sdcard，然后 adb pull /sdcard/filename /path/on/pc。 复制电脑里的文件到设备命令： adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt; 例： adb push ~/sr.mp4 /sdcard/ 小技巧：设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 adb push /path/on/pc /sdcard/filename，然后 adb shell 和 su 在 adb shell 里获取 root 权限后，cp /sdcard/filename /path/on/device。 模拟按键/输入在 adb shell 里有个很实用的命令叫 input，通过它可以做一些有趣的事情。 input 命令的完整 help 信息如下： Usage: input [&lt;source&gt;] &lt;command&gt; [&lt;arg&gt;...]The sources are: mouse keyboard joystick touchnavigation touchpad trackball stylus dpad gesture touchscreen gamepadThe commands and default sources are: text &lt;string&gt; (Default: touchscreen) keyevent [--longpress] &lt;key code number or name&gt; ... (Default: keyboard) tap &lt;x&gt; &lt;y&gt; (Default: touchscreen) swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt; [duration(ms)] (Default: touchscreen) press (Default: trackball) roll &lt;dx&gt; &lt;dy&gt; (Default: trackball) 比如使用 adb shell input keyevent &lt;keycode&gt; 命令，不同的 keycode 能实现不同的功能，完整的 keycode 列表详见 KeyEvent，摘引部分我觉得有意思的如下： keycode 含义 3 HOME 键 4 返回键 5 打开拨号应用 6 挂断电话 24 增加音量 25 降低音量 26 电源键 27 拍照（需要在相机应用里） 64 打开浏览器 82 菜单键 85 播放/暂停 86 停止播放 87 播放下一首 88 播放上一首 122 移动光标到行首或列表顶部 123 移动光标到行末或列表底部 126 恢复播放 127 暂停播放 164 静音 176 打开系统设置 187 切换应用 207 打开联系人 208 打开日历 209 打开音乐 210 打开计算器 220 降低屏幕亮度 221 提高屏幕亮度 223 系统休眠 224 点亮屏幕 231 打开语音助手 276 如果没有 wakelock 则让系统休眠 下面是 input 命令的一些用法举例。 电源键命令： adb shell input keyevent 26 执行效果相当于按电源键。 菜单键命令： adb shell input keyevent 82 HOME 键命令： adb shell input keyevent 3 返回键命令： adb shell input keyevent 4 音量控制增加音量： adb shell input keyevent 24 降低音量： adb shell input keyevent 25 静音： adb shell input keyevent 164 媒体控制播放/暂停： adb shell input keyevent 85 停止播放： adb shell input keyevent 86 播放下一首： adb shell input keyevent 87 播放上一首： adb shell input keyevent 88 恢复播放： adb shell input keyevent 126 暂停播放： adb shell input keyevent 127 点亮/熄灭屏幕可以通过上文讲述过的模拟电源键来切换点亮和熄灭屏幕，但如果明确地想要点亮或者熄灭屏幕，那可以使用如下方法。 点亮屏幕： adb shell input keyevent 224 熄灭屏幕： adb shell input keyevent 223 滑动解锁如果锁屏没有密码，是通过滑动手势解锁，那么可以通过 input swipe 来解锁。 命令（参数以机型 Nexus 5，向上滑动手势解锁举例）： adb shell input swipe 300 1000 300 500 参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标。 输入文本在焦点处于某文本框时，可以通过 input 命令来输入文本。 命令： adb shell input text hello 现在 hello 出现在文本框了。 查看日志Android 系统的日志分为两部分，底层的 Linux 内核日志输出到 /proc/kmsg，Android 的日志输出到 /dev/log。 Android 日志命令格式： [adb] logcat [&lt;option&gt;] ... [&lt;filter-spec&gt;] ... 常用用法列举如下： 按级别过滤日志Android 的日志分为如下几个优先级（priority）： V —— Verbose（最低，输出得最多） D —— Debug I —— Info W —— Warning E —— Error F —— Fatal S —— Silent（最高，啥也不输出） 按某级别过滤日志则会将该级别及以上的日志输出。 比如，命令： adb logcat *:W 会将 Warning、Error、Fatal 和 Silent 日志输出。 （注： 在 macOS 下需要给 *:W 这样以 * 作为 tag 的参数加双引号，如 adb logcat &quot;*:W&quot;，不然会报错 no matches found: *:W。） 按 tag 和级别过滤日志&lt;filter-spec&gt; 可以由多个 &lt;tag&gt;[:priority] 组成。 比如，命令： adb logcat ActivityManager:I MyApp:D *:S 表示输出 tag ActivityManager 的 Info 以上级别日志，输出 tag MyApp 的 Debug 以上级别日志，及其它 tag 的 Silent 级别日志（即屏蔽其它 tag 日志）。 日志格式可以用 adb logcat -v &lt;format&gt; 选项指定日志输出格式。 日志支持按以下几种 &lt;format&gt;： brief 默认格式。格式为： &lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt; 示例： D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0 process 格式为： &lt;priority&gt;(&lt;pid&gt;) &lt;message&gt; 示例： D( 1785) Disconnected process message: 10, size: 0 (HeadsetStateMachine) tag 格式为： &lt;priority&gt;/&lt;tag&gt;: &lt;message&gt; 示例： D/HeadsetStateMachine: Disconnected process message: 10, size: 0 raw 格式为： &lt;message&gt; 示例： Disconnected process message: 10, size: 0 time 格式为： &lt;datetime&gt; &lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt; 示例： 08-28 22:39:39.974 D/HeadsetStateMachine( 1785): Disconnected process message: 10, size: 0 threadtime 格式为： &lt;datetime&gt; &lt;pid&gt; &lt;tid&gt; &lt;priority&gt; &lt;tag&gt;: &lt;message&gt; 示例： 08-28 22:39:39.974 1785 1832 D HeadsetStateMachine: Disconnected process message: 10, size: 0 long 格式为： [ &lt;datetime&gt; &lt;pid&gt;:&lt;tid&gt; &lt;priority&gt;/&lt;tag&gt; ]&lt;message&gt; 示例： [ 08-28 22:39:39.974 1785: 1832 D/HeadsetStateMachine ]Disconnected process message: 10, size: 0 指定格式可与上面的过滤同时使用。比如： adb logcat -v long ActivityManager:I *:S 清空日志adb logcat -c 内核日志命令： adb shell dmesg 输出示例： &lt;6&gt;[14201.684016] PM: noirq resume of devices complete after 0.982 msecs&lt;6&gt;[14201.685525] PM: early resume of devices complete after 0.838 msecs&lt;6&gt;[14201.753642] PM: resume of devices complete after 68.106 msecs&lt;4&gt;[14201.755954] Restarting tasks ... done.&lt;6&gt;[14201.771229] PM: suspend exit 2016-08-28 13:31:32.679217193 UTC&lt;6&gt;[14201.872373] PM: suspend entry 2016-08-28 13:31:32.780363596 UTC&lt;6&gt;[14201.872498] PM: Syncing filesystems ... done. 中括号里的 [14201.684016] 代表内核开始启动后的时间，单位为秒。 通过内核日志我们可以做一些事情，比如衡量内核启动时间，在系统启动完毕后的内核日志里找到 Freeing init memory 那一行前面的时间就是。 查看设备信息型号命令： adb shell getprop ro.product.model 输出示例： Nexus 5 电池状况命令： adb shell dumpsys battery 输入示例： Current Battery Service state: AC powered: false USB powered: true Wireless powered: false status: 2 health: 2 present: true level: 44 scale: 100 voltage: 3872 temperature: 280 technology: Li-poly 其中 scale 代表最大电量，level 代表当前电量。上面的输出表示还剩下 44% 的电量。 屏幕分辨率命令： adb shell wm size 输出示例： Physical size: 1080x1920 该设备屏幕分辨率为 1080px * 1920px。 如果使用命令修改过，那输出可能是： Physical size: 1080x1920Override size: 480x1024 表明设备的屏幕分辨率原本是 1080px 1920px，当前被修改为 480px 1024px。 屏幕密度命令： adb shell wm density 输出示例： Physical density: 420 该设备屏幕密度为 420dpi。 如果使用命令修改过，那输出可能是： Physical density: 480Override density: 160 表明设备的屏幕密度原来是 480dpi，当前被修改为 160dpi。 显示屏参数命令： adb shell dumpsys window displays 输出示例： WINDOW MANAGER DISPLAY CONTENTS (dumpsys window displays) Display: mDisplayId=0 init=1080x1920 420dpi cur=1080x1920 app=1080x1794 rng=1080x1017-1810x1731 deferred=false layoutNeeded=false 其中 mDisplayId 为 显示屏编号，init 是初始分辨率和屏幕密度，app 的高度比 init 里的要小，表示屏幕底部有虚拟按键，高度为 1920 - 1794 = 126px 合 42dp。 android_id命令： adb shell settings get secure android_id 输出示例： 51b6be48bac8c569 IMEI在 Android 4.4 及以下版本可通过如下命令获取 IMEI： adb shell dumpsys iphonesubinfo 输出示例： Phone Subscriber Info: Phone Type = GSM Device ID = 860955027785041 其中的 Device ID 就是 IMEI。 而在 Android 5.0 及以上版本里这个命令输出为空，得通过其它方式获取了（需要 root 权限）： adb shellsuservice call iphonesubinfo 1 输出示例： Result: Parcel( 0x00000000: 00000000 0000000f 00360038 00390030 '........8.6.0.9.' 0x00000010: 00350035 00320030 00370037 00350038 '5.5.0.2.7.7.8.5.' 0x00000020: 00340030 00000031 '0.4.1... ') 把里面的有效内容提取出来就是 IMEI 了，比如这里的是 860955027785041。 参考：adb shell dumpsys iphonesubinfo not working since Android 5.0 Lollipop Android 系统版本命令： adb shell getprop ro.build.version.release 输出示例： 5.0.2 IP 地址每次想知道设备的 IP 地址的时候都得「设置」-「关于手机」-「状态信息」-「IP地址」很烦对不对？通过 adb 可以方便地查看。 命令： adb shell ifconfig | grep Mask 输出示例： inet addr:10.130.245.230 Mask:255.255.255.252inet addr:127.0.0.1 Mask:255.0.0.0 那么 10.130.245.230 就是设备 IP 地址。 在有的设备上这个命令没有输出，如果设备连着 WiFi，可以使用如下命令来查看局域网 IP： adb shell ifconfig wlan0 输出示例： wlan0: ip 10.129.160.99 mask 255.255.240.0 flags [up broadcast running multicast] 或 wlan0 Link encap:UNSPEC inet addr:10.129.168.57 Bcast:10.129.175.255 Mask:255.255.240.0 inet6 addr: fe80::66cc:2eff:fe68:b6b6/64 Scope: Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:496520 errors:0 dropped:0 overruns:0 frame:0 TX packets:68215 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:3000 RX bytes:116266821 TX bytes:8311736 如果以上命令仍然不能得到期望的信息，那可以试试以下命令（部分系统版本里可用）： adb shell netcfg 输出示例： wlan0 UP 10.129.160.99/20 0x00001043 f8:a9:d0:17:42:4dlo UP 127.0.0.1/8 0x00000049 00:00:00:00:00:00p2p0 UP 0.0.0.0/0 0x00001003 fa:a9:d0:17:42:4dsit0 DOWN 0.0.0.0/0 0x00000080 00:00:00:00:00:00rmnet0 DOWN 0.0.0.0/0 0x00000000 00:00:00:00:00:00rmnet1 DOWN 0.0.0.0/0 0x00000000 00:00:00:00:00:00rmnet3 DOWN 0.0.0.0/0 0x00000000 00:00:00:00:00:00rmnet2 DOWN 0.0.0.0/0 0x00000000 00:00:00:00:00:00rmnet4 DOWN 0.0.0.0/0 0x00000000 00:00:00:00:00:00rmnet6 DOWN 0.0.0.0/0 0x00000000 00:00:00:00:00:00rmnet5 DOWN 0.0.0.0/0 0x00000000 00:00:00:00:00:00rmnet7 DOWN 0.0.0.0/0 0x00000000 00:00:00:00:00:00rev_rmnet3 DOWN 0.0.0.0/0 0x00001002 4e:b7:e4:2e:17:58rev_rmnet2 DOWN 0.0.0.0/0 0x00001002 4e:f0:c8:bf:7a:cfrev_rmnet4 DOWN 0.0.0.0/0 0x00001002 a6:c0:3b:6b:c4:1frev_rmnet6 DOWN 0.0.0.0/0 0x00001002 66:bb:5d:64:2e:e9rev_rmnet5 DOWN 0.0.0.0/0 0x00001002 0e:1b:eb:b9:23:a0rev_rmnet7 DOWN 0.0.0.0/0 0x00001002 7a:d9:f6:81:40:5arev_rmnet8 DOWN 0.0.0.0/0 0x00001002 4e:e2:a9:bb:d0:1brev_rmnet0 DOWN 0.0.0.0/0 0x00001002 fe:65:d0:ca:82:a9rev_rmnet1 DOWN 0.0.0.0/0 0x00001002 da:d8:e8:4f:2e:fe 可以看到网络连接名称、启用状态、IP 地址和 Mac 地址等信息。 Mac 地址命令： adb shell cat /sys/class/net/wlan0/address 输出示例： f8:a9:d0:17:42:4d 这查看的是局域网 Mac 地址，移动网络或其它连接的信息可以通过前面的小节「IP 地址」里提到的 adb shell netcfg 命令来查看。 CPU 信息命令： adb shell cat /proc/cpuinfo 输出示例： Processor : ARMv7 Processor rev 0 (v7l)processor : 0BogoMIPS : 38.40processor : 1BogoMIPS : 38.40processor : 2BogoMIPS : 38.40processor : 3BogoMIPS : 38.40Features : swp half thumb fastmult vfp edsp neon vfpv3 tls vfpv4 idiva idivtCPU implementer : 0x51CPU architecture: 7CPU variant : 0x2CPU part : 0x06fCPU revision : 0Hardware : Qualcomm MSM 8974 HAMMERHEAD (Flattened Device Tree)Revision : 000bSerial : 0000000000000000 这是 Nexus 5 的 CPU 信息，我们从输出里可以看到使用的硬件是 Qualcomm MSM 8974，processor 的编号是 0 到 3，所以它是四核的，采用的架构是 ARMv7 Processor rev 0 (v71)。 内存信息命令： adb shell cat /proc/meminfo 输出示例： MemTotal: 1027424 kBMemFree: 486564 kBBuffers: 15224 kBCached: 72464 kBSwapCached: 24152 kBActive: 110572 kBInactive: 259060 kBActive(anon): 79176 kBInactive(anon): 207736 kBActive(file): 31396 kBInactive(file): 51324 kBUnevictable: 3948 kBMlocked: 0 kBHighTotal: 409600 kBHighFree: 132612 kBLowTotal: 617824 kBLowFree: 353952 kBSwapTotal: 262140 kBSwapFree: 207572 kBDirty: 0 kBWriteback: 0 kBAnonPages: 265324 kBMapped: 47072 kBShmem: 1020 kBSlab: 57372 kBSReclaimable: 7692 kBSUnreclaim: 49680 kBKernelStack: 4512 kBPageTables: 5912 kBNFS_Unstable: 0 kBBounce: 0 kBWritebackTmp: 0 kBCommitLimit: 775852 kBCommitted_AS: 13520632 kBVmallocTotal: 385024 kBVmallocUsed: 61004 kBVmallocChunk: 209668 kB 其中，MemTotal 就是设备的总内存，MemFree 是当前空闲内存。 更多硬件与系统属性设备的更多硬件与系统属性可以通过如下命令查看： adb shell cat /system/build.prop 这会输出很多信息，包括前面几个小节提到的「型号」和「Android 系统版本」等。 输出里还包括一些其它有用的信息，它们也可通过 adb shell getprop &lt;属性名&gt; 命令单独查看，列举一部分属性如下： 属性名 含义 ro.build.version.sdk SDK 版本 ro.build.version.release Android 系统版本 ro.build.version.security_patch Android 安全补丁程序级别 ro.product.model 型号 ro.product.brand 品牌 ro.product.name 设备名 ro.product.board 处理器型号 ro.product.cpu.abilist CPU 支持的 abi 列表[节注一] persist.sys.isUsbOtgEnabled 是否支持 OTG dalvik.vm.heapsize 每个应用程序的内存上限 ro.sf.lcd_density 屏幕密度 节注一： 一些小厂定制的 ROM 可能修改过 CPU 支持的 abi 列表的属性名，如果用 ro.product.cpu.abilist 属性名查找不到，可以这样试试： adb shell cat /system/build.prop | grep ro.product.cpu.abi 示例输出： ro.product.cpu.abi=armeabi-v7aro.product.cpu.abi2=armeabi 修改设置注： 修改设置之后，运行恢复命令有可能显示仍然不太正常，可以运行 adb reboot 重启设备，或手动重启。 修改设置的原理主要是通过 settings 命令修改 /data/data/com.android.providers.settings/databases/settings.db 里存放的设置值。 分辨率命令： adb shell wm size 480x1024 表示将分辨率修改为 480px * 1024px。 恢复原分辨率命令： adb shell wm size reset 屏幕密度命令： adb shell wm density 160 表示将屏幕密度修改为 160dpi。 恢复原屏幕密度命令： adb shell wm density reset 显示区域命令： adb shell wm overscan 0,0,0,200 四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 200px 留白。 恢复原显示区域命令： adb shell wm overscan reset 关闭 USB 调试模式命令： adb shell settings put global adb_enabled 0 恢复： 用命令恢复不了了，毕竟关闭了 USB 调试 adb 就连接不上 Android 设备了。 去设备上手动恢复吧：「设置」-「开发者选项」-「Android 调试」。 状态栏和导航栏的显示隐藏本节所说的相关设置对应 Cyanogenmod 里的「扩展桌面」。 命令： adb shell settings put global policy_control &lt;key-values&gt; &lt;key-values&gt; 可由如下几种键及其对应的值组成，格式为 &lt;key1&gt;=&lt;value1&gt;:&lt;key2&gt;=&lt;value2&gt;。 key 含义 immersive.full 同时隐藏 immersive.status 隐藏状态栏 immersive.navigation 隐藏导航栏 immersive.preconfirms ? 这些键对应的值可则如下值用逗号组合： value 含义 apps 所有应用 * 所有界面 packagename 指定应用 -packagename 排除指定应用 例如： adb shell settings put global policy_control immersive.full=* 表示设置在所有界面下都同时隐藏状态栏和导航栏。 adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3 表示设置在包名为 com.package1 和 com.package2 的应用里隐藏状态栏，在除了包名为 com.package3 的所有应用里隐藏导航栏。 实用功能屏幕截图命令： adb shell screencap -p /sdcard/sc.png 然后将 png 文件导出到电脑： adb pull /sdcard/sc.png 可以使用 adb shell screencap -h 查看 screencap 命令的帮助信息，下面是两个有意义的参数及含义： 参数 含义 -p 指定保存文件为 png 格式 -d display-id 指定截图的显示屏编号（有多显示屏的情况下） 实测如果指定文件名以 .png 结尾时可以省略 -p 参数；否则需要使用 -p 参数。如果不指定文件名，截图文件的内容将直接输出到 stdout。 直接一行命令截图并保存到电脑的方法： Linux 和 Windows adb shell screencap -p | sed \"s/\\r$//\" &gt; sc.png Mac OS X adb shell screencap -p | gsed \"s/\\r$//\" &gt; sc.png 这个方法需要用到 gnu sed 命令，在 Linux 下直接就有，在 Windows 下 Git 安装目录的 bin 文件夹下也有。如果确实找不到该命令，可以下载 sed for Windows 并将 sed.exe 所在文件夹添加到 PATH 环境变量里。 而在 Mac 下使用系统自带的 sed 命令会报错： sed: RE error: illegal byte sequence 需要安装 gnu-sed，然后使用 gsed 命令： brew install gnu-sed 录制屏幕录制屏幕以 mp4 格式保存到 /sdcard： adb shell screenrecord /sdcard/filename.mp4 需要停止时按 Ctrl-C，默认录制时间和最长录制时间都是 180 秒。 如果需要导出到电脑： adb pull /sdcard/filename.mp4 可以使用 adb shell screenrecord --help 查看 screenrecord 命令的帮助信息，下面是常见参数及含义： 参数 含义 –size WIDTHxHEIGHT 视频的尺寸，比如 1280x720，默认是屏幕分辨率。 –bit-rate RATE 视频的比特率，默认是 4Mbps。 –time-limit TIME 录制时长，单位秒。 –verbose 输出更多信息。 重新挂载 system 分区为可写注：需要 root 权限。 /system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 /system 进行写操作，所以需要重新挂载它为可读写。 步骤： 进入 shell 并切换到 root 用户权限。 命令： adb shellsu 查看当前分区挂载情况。 命令： mount 输出示例： rootfs / rootfs ro,relatime 0 0tmpfs /dev tmpfs rw,seclabel,nosuid,relatime,mode=755 0 0devpts /dev/pts devpts rw,seclabel,relatime,mode=600 0 0proc /proc proc rw,relatime 0 0sysfs /sys sysfs rw,seclabel,relatime 0 0selinuxfs /sys/fs/selinux selinuxfs rw,relatime 0 0debugfs /sys/kernel/debug debugfs rw,relatime 0 0none /var tmpfs rw,seclabel,relatime,mode=770,gid=1000 0 0none /acct cgroup rw,relatime,cpuacct 0 0none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0tmpfs /mnt/asec tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=755,gid=1000 0 0none /dev/memcg cgroup rw,relatime,memory 0 0none /dev/cpuctl cgroup rw,relatime,cpu 0 0none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=750,gid=1000 0 0none /sys/fs/cgroup/memory cgroup rw,relatime,memory 0 0none /sys/fs/cgroup/freezer cgroup rw,relatime,freezer 0 0/dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0/dev/block/platform/msm_sdcc.1/by-name/userdata /data ext4 rw,seclabel,nosuid,nodev,relatime,noauto_da_alloc,data=ordered 0 0/dev/block/platform/msm_sdcc.1/by-name/cache /cache ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0/dev/block/platform/msm_sdcc.1/by-name/persist /persist ext4 rw,seclabel,nosuid,nodev,relatime,data=ordered 0 0/dev/block/platform/msm_sdcc.1/by-name/modem /firmware vfat ro,context=u:object_r:firmware_file:s0,relatime,uid=1000,gid=1000,fmask=0337,dmask=0227,codepage=cp437,iocharset=iso8859-1,shortname=lower,errors=remount-ro 0 0/dev/fuse /mnt/shell/emulated fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0/dev/fuse /mnt/shell/emulated/0 fuse rw,nosuid,nodev,relatime,user_id=1023,group_id=1023,default_permissions,allow_other 0 0 找到其中我们关注的带 /system 的那一行： /dev/block/platform/msm_sdcc.1/by-name/system /system ext4 ro,seclabel,relatime,data=ordered 0 0 重新挂载。 命令： mount -o remount,rw -t yaffs2 /dev/block/platform/msm_sdcc.1/by-name/system /system 这里的 /dev/block/platform/msm_sdcc.1/by-name/system 就是我们从上一步的输出里得到的文件路径。 如果输出没有提示错误的话，操作就成功了，可以对 /system 下的文件为所欲为了。 查看连接过的 WiFi 密码注：需要 root 权限。 命令： adb shellsucat /data/misc/wifi/*.conf 输出示例： network=&#123;truessid=\"TP-LINK_9DFC\"truescan_ssid=1truepsk=\"123456789\"truekey_mgmt=WPA-PSKtruegroup=CCMP TKIPtrueauth_alg=OPENtruesim_num=1truepriority=13893&#125;network=&#123;truessid=\"TP-LINK_F11E\"truepsk=\"987654321\"truekey_mgmt=WPA-PSKtruesim_num=1truepriority=17293&#125; ssid 即为我们在 WLAN 设置里看到的名称，psk 为密码，key_mgmt 为安全加密方式。 设置系统日期和时间注：需要 root 权限。 命令： adb shellsudate -s 20160823.131500 表示将系统日期和时间更改为 2016 年 08 月 23 日 13 点 15 分 00 秒。 重启手机命令： adb reboot 检测设备是否已 root命令： adb shellsu 此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。 使用 Monkey 进行压力测试Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。 简单用法： adb shell monkey -p &lt;packagename&gt; -v 500 表示向 &lt;packagename&gt; 指定的应用程序发送 500 个伪随机事件。 Monkey 的详细用法参考 官方文档。 开启/关闭 WiFi注：需要 root 权限。 有时需要控制设备的 WiFi 状态，可以用以下指令完成。 开启 WiFi： adb rootadb shell svc wifi enable 关闭 WiFi： adb rootadb shell svc wifi disable 若执行成功，输出为空；若未取得 root 权限执行此命令，将执行失败，输出 Killed。 刷机相关命令重启到 Recovery 模式命令： adb reboot recovery 从 Recovery 重启到 Android命令： adb reboot 重启到 Fastboot 模式命令： adb reboot bootloader 通过 sideload 更新系统如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。 以 Recovery 模式下更新为例： 重启到 Recovery 模式。 命令： adb reboot recovery 在设备的 Recovery 界面上操作进入 Apply update-Apply from ADB。 注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 Apply update from ADB。 通过 adb 上传和更新系统。 命令： adb sideload &lt;path-to-update.zip&gt; 更多 adb shell 命令Android 系统是基于 Linux 内核的，所以 Linux 里的很多命令在 Android 里也有相同或类似的实现，在 adb shell 里可以调用。本文档前面的部分内容已经用到了 adb shell 命令。 查看进程命令： adb shell ps 输出示例： USER PID PPID VSIZE RSS WCHAN PC NAMEroot 1 0 8904 788 ffffffff 00000000 S /initroot 2 0 0 0 ffffffff 00000000 S kthreadd...u0_a71 7779 5926 1538748 48896 ffffffff 00000000 S com.sohu.inputmethod.sogou:classicu0_a58 7963 5926 1561916 59568 ffffffff 00000000 S org.mazhuang.boottimemeasure...shell 8750 217 10640 740 00000000 b6f28340 R ps 各列含义： 列名 含义 USER 所属用户 PID 进程 ID PPID 父进程 ID NAME 进程名 查看实时资源占用情况命令： adb shell top 输出示例： User 0%, System 6%, IOW 0%, IRQ 0%User 3 + Nice 0 + Sys 21 + Idle 280 + IOW 0 + IRQ 0 + SIRQ 3 = 307 PID PR CPU% S #THR VSS RSS PCY UID Name 8763 0 3% R 1 10640K 1064K fg shell top 131 0 3% S 1 0K 0K fg root dhd_dpc 6144 0 0% S 115 1682004K 115916K fg system system_server 132 0 0% S 1 0K 0K fg root dhd_rxf 1731 0 0% S 6 20288K 788K fg root /system/bin/mpdecision 217 0 0% S 6 18008K 356K fg shell /sbin/adbd ... 7779 2 0% S 19 1538748K 48896K bg u0_a71 com.sohu.inputmethod.sogou:classic 7963 0 0% S 18 1561916K 59568K fg u0_a58 org.mazhuang.boottimemeasure ... 各列含义： 列名 含义 PID 进程 ID PR 优先级 CPU% 当前瞬间占用 CPU 百分比 S 进程状态（R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程） #THR 线程数 VSS Virtual Set Size 虚拟耗用内存（包含共享库占用的内存） RSS Resident Set Size 实际使用物理内存（包含共享库占用的内存） PCY 调度策略优先级，SP_BACKGROUND/SPFOREGROUND UID 进程所有者的用户 ID NAME 进程名 top 命令还支持一些命令行参数，详细用法如下： Usage: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ] -m num 最多显示多少个进程 -n num 刷新多少次后退出 -d num 刷新时间间隔（单位秒，默认值 5） -s col 按某列排序（可用 col 值：cpu, vss, rss, thr） -t 显示线程信息 -h 显示帮助文档 其它如下是其它常用命令的简单描述，前文已经专门讲过的命令不再额外说明： 命令 功能 cat 显示文件内容 cd 切换目录 chmod 改变文件的存取模式/访问权限 df 查看磁盘空间使用情况 grep 过滤输出 kill 杀死指定 PID 的进程 ls 列举目录内容 mount 挂载目录的查看和管理 mv 移动或重命名文件 ps 查看正在运行的进程 rm 删除文件 top 查看进程的资源占用情况 常见问题启动 adb server 失败出错提示 error: protocol fault (couldn't read status): No error 可能原因 adb server 进程想使用的 5037 端口被占用。 解决方案 找到占用 5037 端口的进程，然后终止它。以 Windows 下为例： netstat -ano | findstr LISTENING...TCP 0.0.0.0:5037 0.0.0.0:0 LISTENING 1548... 这里 1548 即为进程 ID，用命令结束该进程： taskkill /PID 1548 然后再启动 adb 就没问题了。 adb 的非官方实现 fb-adb - A better shell for Android devices (for Mac). 致谢感谢朋友们无私的分享与补充（排名不分先后）。 zxning，linhua55，codeskyblue，seasonyuu，fan123199，zhEdward，0x8BADFOOD，keith666666。 参考链接 Android Debug Bridge ADB Shell Commands logcat Command-line Tool Android ADB命令大全 adb 命令行的使用记录 Android ADB命令大全(通过ADB命令查看wifi密码、MAC地址、设备信息、操作文件、查看文件、日志信息、卸载、启动和安装APK等) 那些做Android开发必须知道的ADB命令 adb shell top 像高手一样使用ADB命令行（2）","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.panzhenglian.com/tags/Android/"}]},{"title":"mysql去除重复数据","slug":"mysql去除重复数据","date":"2016-06-25T15:59:12.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2016/06/25/mysql去除重复数据/","link":"","permalink":"http://blog.panzhenglian.com/2016/06/25/mysql去除重复数据/","excerpt":"","text":"由于在建表时没有设置唯一键，导致数据有重复，删除方法有很多，这里列出一种简单的方式，通俗易懂，适合新手使用使用前记得备份。 可以创建一个新表，将原表中重复数据最小的id存储起来，然后删除在原表中所有不在新表中存在的id 代码如下,我需要去除重复数据的表为 detail，判断重复依据的列分别是 listId 和 imagecreate table tmp_table (id int unsigned not null primary key); 然后insert into tmp_table (select min(id) from detail group by listId,image); 最后delete from detail where id not in (select id from tmp_table); 大功告成","categories":[],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://blog.panzhenglian.com/tags/mysql/"}]},{"title":"Android为什么要避免使用 get/set","slug":"Android为什么要避免使用 get:set","date":"2016-06-05T11:44:21.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2016/06/05/Android为什么要避免使用 get:set/","link":"","permalink":"http://blog.panzhenglian.com/2016/06/05/Android为什么要避免使用 get:set/","excerpt":"","text":"原文链接：https://developer.android.com/training/articles/perf-tips.html#GettersSetters 在像C++这类语言时很常见的做法是使用getter方法​​（i = getCount将（）），而不是直接访问字段（i = mCount）。这是C++中一个很好的习惯，如C＃和​​Java等面向对象的语言也是如此，因为编译器通常可以内联访问，如果需要限制或调试现场访问，可以随时添加代码。 然而，这是在Android上一个坏主意。虚拟方法调用很昂贵，远远超过了实例字段查找。遵循共同的面向对象的编程实践，具有getter和setter的公共接口这是合理的，但在一个类中，你应该总是直接访问字段。 如果没有JIT(just in time compiler)，直接访问字段大约是使用getter的3倍。在JIT的情况下（直接访问字段效率更高），大约是getter的7倍。 需要注意的是，如果你使用ProGuard，直接访问你更将受益，因为ProGuard可以内联访问。","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.panzhenglian.com/tags/Android/"}]},{"title":"如何打开Mac OSX原生的读写NTFS功能","slug":"打开OS X读写NTFS功能","date":"2016-05-31T16:39:33.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2016/06/01/打开OS X读写NTFS功能/","link":"","permalink":"http://blog.panzhenglian.com/2016/06/01/打开OS X读写NTFS功能/","excerpt":"","text":"打开终端，查看磁盘 Volume Nmaediskutil list 我的电脑是这样子的 /dev/disk0 (internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *251.0 GB disk0 1: EFI EFI 209.7 MB disk0s1 2: Apple_CoreStorage Macintosh HD 250.1 GB disk0s2 3: Apple_Boot Recovery HD 650.0 MB disk0s3/dev/disk1 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *1.0 TB disk2 1: Windows_NTFS Expansion 1.0 TB disk2s1 Windows_NTFS 后面就是磁盘名字了,可以看到，我的是 Expansion 编辑/etc/fstab文件sudo vim /etc/fstab 写入以下内容 LABEL= Expansion none ntfs rw,auto,nobrowse 下面来依次解释一下，如果你的名字里面有空格键，就需要用\\040的意思是代替空格键，如：Expansion\\040Drive。 后面的Ntfs rw表示把这个分区挂载为可读写的ntfs格式，最后nobrowse非常重要，因为这个代表了在finder里不显示这个分区，这个选项非常重要，如果不打开的话挂载是不会成功的。 按下 esc，:wq 保存，将硬盘推出，重新插入，这时就不显示磁盘了 解决办法，给磁盘创建快捷方式 sudo ln -s /Volumes/Expansion ~/Desktop/Expansion 这里的 Expansion 换成你磁盘的名字，懒得写的同学请按tab键,后面的名字随意 如果想以后都能看到除Expansion以外其他隐藏的驱动器的话，可以多创建一个这个文件夹快捷方式：如下：sudo ln -s /Volumes ~/Desktop/Volumes 参考：http://bbs.feng.com/read-htm-tid-9932031.html然后我们能在桌面找到，","categories":[{"name":"Mac","slug":"Mac","permalink":"http://blog.panzhenglian.com/categories/Mac/"}],"tags":[]},{"title":"Centos个人应用清单","slug":"Centos个人应用清单","date":"2016-05-28T02:57:12.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2016/05/28/Centos个人应用清单/","link":"","permalink":"http://blog.panzhenglian.com/2016/05/28/Centos个人应用清单/","excerpt":"","text":"首先来个清单列表 Shadowsocks :服务器架设在国外，作为代理使用 JDK Apache :Apache 服务器，占用80端口，作为端口映射以及php程序的容器 tomcat mysql php phpMyAdmin :很不错的数据库web管理工具，由php开发，配置简单 Shadowsocks配置 已经有一篇文章单独描述了，点击这里 JDK 找到jdk官网，下载rpm包到服务器，执行 rpm -ivh jdk-7-linux-x64.rpm JDK默认安装在/usr/java中。 验证安装 执行以下操作，查看信息是否正常： [root@keke java]# java[root@keke java]# javac[root@keke java]# java -versionjava version &quot;1.8.0_91&quot;Java(TM) SE Runtime Environment (build 1.8.0_91-b14)Java HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode) 配置环境变量 通过rpm安装包的方式安装后是不需要配置环境变量的，但是通过压缩文件解压需要配置jdk路径 如下： vi + /etc/profile 添加以下内容 JAVA_HOME=//usr/java/jdk1.8.0_91JRE_HOME=//usr/java/jdk1.8.0_91/jrePATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/binCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport JAVA_HOME JRE_HOME PATH CLASSPATH 使修改生效source /etc/profile Apache、mysql、php配置防火墙，开启80端口、3306端口vi /etc/sysconfig/iptables-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT 重启防火墙使配置生效/etc/init.d/iptables restart 关闭SELINUX,vi /etc/selinux/config#SELINUX=enforcing #注释掉#SELINUXTYPE=targeted #注释掉SELINUX=disabled #增加:wq #保存，关闭shutdown -r now #重启系统 安装Apacheyum -y install httpd 配置vi /etc/httpd/conf/httpd.conf #编辑找到 #ServerName www.example.com:80修改为 ServerName www.osyunwei.com:80 #这里设置为你自己的域名，如果没有域名，可以设置为localhost:wq #保存退出 chkconfig httpd on #设为开机启动/etc/init.d/httpd restart #重启Apache/etc/init.d/httpd start #启动Apache 或service httpd startservice httpd restartservice httpd stop centos 7 上命令有些许不同，应该是systemctl httpd startsystemctl httpd restartsystemctl httpd stop apache默认的程序目录是/var/www/html Apache 配置多域名端口转发一台主机中可能运行着很多web应用，例如 gitlab，javaweb ，php如果开启多个端口，看着端口怎么都别扭，而且不好记，于是，通过apache完成不同域名转发编辑httpd.conf&lt;VirtualHost *:80&gt;&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt; ServerName tomcat.panzhenglian.com ServerAlias tomcat.uuk4.com ProxyPass / http://localhost:7896/ ProxyPassReverse / http://localhost:7896/ ErrorLog logs/tomcat.uuk4.log CustomLog logs/tomcat.uuk4-access_log common&lt;/VirtualHost&gt; 第一行为默认配置，如果不配置，所有的请求都会跳转到最后一条 记录，tomcat 开启的端口是 7896，如果通过域名 tomcat.panzhenglian.com 进入的请求会转发至tomcat处理，这样，一台主机上就可以在根目录部署多个网站了， apache 安全程序根目录添加 .htaccess 文件配置：&lt;DirectoryMatch .*\\.svn|.git|_svn/.*&gt;RewriteEngine OnRewriteRule ^(.*)(\\.svn|.git|_svn)(/.*)$ /index.php [R=301]&lt;/DirectoryMatch&gt; 避免程序下的特定目录被外界访问，无需重启服务器，保存立即生效笔者是通过 git webhooks 来完成程序部署的，因此程序目录下会有.git文件夹， 安装MySQLyum install mysql mysql-server /etc/init.d/mysqld start #启动MySQLchkconfig mysqld on #设为开机启动 为root账户设置密码mysql_secure_installation回车，根据提示输入Y输入2次密码，回车根据提示一路输入Y最后出现：Thanks for using MySQL!MySql密码设置完成，重新启动 MySQL：/etc/init.d/mysqld restart #重启/etc/init.d/mysqld stop #停止/etc/init.d/mysqld start #启动 mysql 启动等命令：service mysqld start/restart/stop# centos 7 # systemctl mysqld start/restart/stop 安装PHP5yum install php-fpm php-common php-devel php-mysqlnd php-mbstring php-mcrypt 升级mysql 到 5.5， yum中的mysql版本较低，添加repo rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm rpm -Uvh http://mirrors.neusoft.edu.cn/epel/6/i386/epel-release-6-8.noarch.rpm rpm -Uvh http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm rpm -Uvh http://dl.iuscommunity.org/pub/ius/stable/Redhat/6/x86_64/epel-release-6-5.noarch.rpm rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm 安装yum --enablerepo=remi,remi-test install mysql mysql-server 查看版本mysql&gt; select version();+-----------+| version() |+-----------+| 5.5.49 |+-----------+1 row in set (0.00 sec)mysql&gt; 升级php到5.5版本添加 epel 源,remi 源# rpm -Uvh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm# rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm 安装 PHP# yum --enablerepo=remi,remi-php55 install php-fpm php-common php-devel php-mysqlnd php-mbstring php-mcrypt 查看php版本[root@keke /]# php -vPHP 5.5.36 (cli) (built: May 25 2016 16:10:36)Copyright (c) 1997-2015 The PHP GroupZend Engine v2.5.0, Copyright (c) 1998-2015 Zend Technologies[root@keke /]# 启动 php-fpm# service php-fpm start 需要先安装php，再添加repo升级，不然可能apache服务器不执行php脚本","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.panzhenglian.com/tags/Linux/"}]},{"title":"搭建shadowsocks服务器","slug":"搭建shadowsocks服务器","date":"2016-05-27T18:16:08.000Z","updated":"2017-06-01T08:10:33.000Z","comments":true,"path":"2016/05/28/搭建shadowsocks服务器/","link":"","permalink":"http://blog.panzhenglian.com/2016/05/28/搭建shadowsocks服务器/","excerpt":"","text":"安装Debian/Ubuntu:apt-get install python-pippip install shadowsocks CentOS:yum install python-setuptools &amp;&amp; easy_install pippip install shadowsocks easy_install貌似也可以装shadowsocks，但笔者装完之后未成功连接 sudo easy_install shadowsocks 用vi新建一个配置文件：vi /etc/shadowsocks.json 然后输入如下内容：&#123; \"server\":\"server_ip\", \"server_port\":12342, \"local_address\": \"127.0.0.1\", \"local_port\":1080, \"password\":\"password\", \"timeout\":300, \"method\":\"rc4-md5\", \"fast_open\": false&#125; 保存退出。 后台启动和停止shadowsocks服务器：ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d stop 或nohup ssserver -c /etc/shadowsocks.json &amp; 如果启动报错，安装依赖的工具# 一些安装包需要的编译工具yum install gccyum install libeventyum install python-develpip install gevent# 安装加密工具yum install openssl-develyum install swigpip install M2Crypto","categories":[{"name":"翻墙","slug":"翻墙","permalink":"http://blog.panzhenglian.com/categories/翻墙/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.panzhenglian.com/tags/Linux/"}]},{"title":"Centos7 mysql数据库安装和配置(转载)","slug":"Centos7 mysql数据库安装和配置","date":"2016-05-22T03:48:58.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2016/05/22/Centos7 mysql数据库安装和配置/","link":"","permalink":"http://blog.panzhenglian.com/2016/05/22/Centos7 mysql数据库安装和配置/","excerpt":"","text":"原文链接http://www.cnblogs.com/starof/p/4680083.html 一、系统环境centos 7[root@yl-web ~]# cat /etc/redhat-releaseCentOS Linux release 7.2.1511 (Core) 二、mysql安装一般网上给出的资料都是 #yum install mysql#yum install mysql-server#yum install mysql-devel 安装mysql和mysql-devel都成功，但是安装mysql-server失败，如下： [root@yl-web yl]# yum install mysql-serverLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * base: mirrors.sina.cn * extras: mirrors.sina.cn * updates: mirrors.sina.cnNo package mysql-server available.Error: Nothing to do 查资料发现是CentOS 7 版本将MySQL数据库软件从默认的程序列表中移除，用mariadb代替了。 有两种解决办法： 1、方法一：安装mariadbMariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护，采用GPL授权许可。开发这个分支的原因之一是：甲骨文公司收购了MySQL后，有将MySQL闭源的潜在风险，因此社区采用分支的方式来避开这个风险。MariaDB的目的是完全兼容MySQL，包括API和命令行，使之能轻松成为MySQL的代替品。 安装mariadb，大小59 M。 [root@yl-web yl]# yum install mariadb-server mariadb mariadb数据库的相关命令是： systemctl start mariadb #启动MariaDB systemctl stop mariadb #停止MariaDB systemctl restart mariadb #重启MariaDB systemctl enable mariadb #设置开机启动 所以先启动数据库 [root@yl-web yl]# systemctl start mariadb 然后就可以正常使用mysql了 [root@yl-web yl]# mysql -u root -pEnter password: Welcome to the MariaDB monitor. Commands end with ; or \\g.Your MariaDB connection id is 3Server version: 5.5.41-MariaDB MariaDB ServerCopyright (c) 2000, 2014, Oracle, MariaDB Corporation Ab and others.Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.MariaDB [(none)]&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || test |+--------------------+4 rows in set (0.00 sec)MariaDB [(none)]&gt; 复制代码 安装mariadb后显示的也是 MariaDB [(none)]&gt; ，可能看起来有点不习惯。下面是第二种方法。 2、方法二：官网下载安装mysql-server# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm# rpm -ivh mysql-community-release-el7-5.noarch.rpm# yum install mysql-community-server 安装成功后重启mysql服务。 # service mysqld restart 初次安装mysql，root账户没有密码。 [root@yl-web yl]# mysql -u root Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 3Server version: 5.6.26 MySQL Community Server (GPL)Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || test |+--------------------+4 rows in set (0.01 sec)mysql&gt; 设置密码 mysql&gt; set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);Query OK, 0 rows affected (0.00 sec)mysql&gt; 不需要重启数据库即可生效。 在mysql安装过程中如下内容： Installed: mysql-community-client.x86_64 0:5.6.26-2.el7 mysql-community-devel.x86_64 0:5.6.26-2.el7 mysql-community-libs.x86_64 0:5.6.26-2.el7 mysql-community-server.x86_64 0:5.6.26-2.el7Dependency Installed: mysql-community-common.x86_64 0:5.6.26-2.el7 Replaced: mariadb.x86_64 1:5.5.41-2.el7_0 mariadb-devel.x86_64 1:5.5.41-2.el7_0 mariadb-libs.x86_64 1:5.5.41-2.el7_0 mariadb-server.x86_64 1:5.5.41-2.el7_0 所以安装完以后mariadb自动就被替换了，将不再生效。[root@yl-web yl]# rpm -qa |grep mariadb[root@yl-web yl]# 三、配置mysql1、编码mysql配置文件为/etc/my.cnf 最后加上编码配置[mysql]default-character-set =utf8 这里的字符编码必须和/usr/share/mysql/charsets/Index.xml中一致。 &lt;charset name=&quot;utf8&quot;&gt; &lt;family&gt;Unicode&lt;/family&gt; &lt;description&gt;UTF-8 Unicode&lt;/description&gt; &lt;alias&gt;utf-8&lt;/alias&gt; &lt;collation name=&quot;utf8_general_ci&quot; id=&quot;33&quot;&gt; &lt;flag&gt;primary&lt;/flag&gt; &lt;flag&gt;compiled&lt;/flag&gt; &lt;/collation&gt; &lt;collation name=&quot;utf8_bin&quot; id=&quot;83&quot;&gt; &lt;flag&gt;binary&lt;/flag&gt; &lt;flag&gt;compiled&lt;/flag&gt; &lt;/collation&gt;&lt;/charset&gt; 2、远程连接设置把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。mysql&gt; grant all privileges on *.* to root@&apos;%&apos;identified by &apos;password&apos;; 如果是新用户而不是root，则要先新建用户mysql&gt;create user &apos;username&apos;@&apos;%&apos; identified by &apos;password&apos;; 此时就可以进行远程连接了。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.panzhenglian.com/tags/Linux/"},{"name":"mysql","slug":"mysql","permalink":"http://blog.panzhenglian.com/tags/mysql/"}]},{"title":"CURL常用命令","slug":"CURL常用命令","date":"2016-05-18T15:59:55.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2016/05/18/CURL常用命令/","link":"","permalink":"http://blog.panzhenglian.com/2016/05/18/CURL常用命令/","excerpt":"","text":"参考资料 阮一峰的博客－curl网站开发指南 下载单个文件，默认将输出打印到标准输出中(STDOUT)中curl http://www.centos.org 通过-o/-O选项保存下载的文件到指定的文件中： -o：将文件保存为命令行中指定的文件名的文件中 -O：使用URL中默认的文件名保存文件到本地 # 将文件下载到本地并命名为mygettext.html curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html # 将文件保存到本地并命名为gettext.html curl -O http://www.gnu.org/software/gettext/manual/gettext.html 同样可以使用转向字符”&gt;”对输出进行转向输出 同时获取多个文件curl -O URL1 -O URL2 若同时从同一站点下载多个文件时，curl会尝试重用链接(connection)。 通过-L选项进行重定向默认情况下CURL不会发送HTTP Location headers(重定向).当一个被请求页面移动到另一个站点时，会发送一个HTTP Loaction header作为请求，然后将请求重定向到新的地址上。例如：访问google.com时，会自动将地址重定向到google.com.hk上。 curl http://www.google.com &lt;HTML&gt; &lt;HEAD&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; &lt;TITLE&gt;302 Moved&lt;/TITLE&gt; &lt;/HEAD&gt; &lt;BODY&gt; &lt;H1&gt;302 Moved&lt;/H1&gt; The document has moved &lt;A HREF=&quot;http://www.google.com.hk/url?sa=p&amp;amp;hl=zh-CN&amp;amp;pref=hkredirect&amp;amp;pval=yes&amp;amp;q=http://www.google.com.hk/&amp;amp;ust=1379402837567135amp;usg=AFQjCNF3o7umf3jyJpNDPuF7KTibavE4aA&quot;&gt;here&lt;/A&gt;. &lt;/BODY&gt; &lt;/HTML&gt; 上述输出说明所请求的档案被转移到了http://www.google.com.hk。 这是可以通过使用-L选项进行强制重定向 让curl使用地址重定向，此时会查询google.com.hk站点 curl -L http://www.google.com 断点续传通过使用-C选项可对大文件使用断点续传功能，如： # 当文件在下载完成之前结束该进程 $ curl -O http://www.gnu.org/software/gettext/manual/gettext.html ############## 20.1% # 通过添加-C选项继续对该文件进行下载，已经下载过的文件不会被重新下载 curl -C - -O http://www.gnu.org/software/gettext/manual/gettext.html ############### 21.1% 对CURL使用网络限速通过–limit-rate选项对CURL的最大网络使用进行限制 下载速度最大不会超过1000B/second curl --limit-rate 1000B -O http://www.gnu.org/software/gettext/manual/gettext.html 下载指定时间内修改过的文件 当下载一个文件时，可对该文件的最后修改日期进行判断，如果该文件在指定日期内修改过，就进行下载，否则不下载。该功能可通过使用-z选项来实现： 若yy.html文件在2011/12/21之后有过更新才会进行下载 curl -z 21-Dec-11 http://www.example.com/yy.html CURL授权在访问需要授权的页面时，可通过-u选项提供用户名和密码进行授权 curl -u username:password URL # 通常的做法是在命令行只输入用户名，之后会提示输入密码，这样可以保证在查看历史记录时不会将密码泄露 curl -u username URL 从FTP服务器下载文件CURL同样支持FTP下载，若在url中指定的是某个文件路径而非具体的某个要下载的文件名，CURL则会列出该目录下的所有文件名而并非下载该目录下的所有文件 # 列出public_html下的所有文件夹和文件 curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/ # 下载xss.php文件 curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/xss.php 上传文件到FTP服务器通过 -T 选项可将指定的本地文件上传到FTP服务器上 # 将myfile.txt文件上传到服务器 curl -u ftpuser:ftppass -T myfile.txt ftp://ftp.testserver.com # 同时上传多个文件 curl -u ftpuser:ftppass -T &quot;{file1,file2}&quot; ftp://ftp.testserver.com # 从标准输入获取内容保存到服务器指定的文件中 curl -u ftpuser:ftppass -T - ftp://ftp.testserver.com/myfile_1.txt 获取更多信息通过使用 -v 和 -trace获取更多的链接信息 通过字典查询单词# 查询bash单词的含义 curl dict://dict.org/d:bash # 列出所有可用词典 curl dict://dict.org/show:db # 在foldoc词典中查询bash单词的含义 curl dict://dict.org/d:bash:foldoc 为CURL设置代理x 选项可以为CURL添加代理功能 # 指定代理主机和端口 curl -x proxysever.test.com:3128 http://google.co.in 保存与使用网站cookie信息# 将网站的cookies信息保存到sugarcookies文件中 curl -D sugarcookies http://localhost/sugarcrm/index.php # 使用上次保存的cookie信息 curl -b sugarcookies http://localhost/sugarcrm/index.php 传递请求数据默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据可以通过 –data/-d 方式指定使用POST方式传递数据 # GET curl -u username https://api.github.com/user?access_token=XXXXXXXXXX # POST curl -u username --data &quot;param1=value1&amp;param2=value&quot; https://api.github.com # 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端 curl --data @filename https://github.api.com/authorizations 注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如： curl -d &quot;value%201&quot; http://hostname.com 在新版本的CURL中，提供了新的选项 –data-urlencode，通过该选项提供的参数会自动转义特殊字符。 curl --data-urlencode &quot;value 1&quot; http://hostname.com 除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如： curl -I -X DELETE https://api.github.cim 上传文件 curl --form &quot;fileupload=@filename.txt&quot; http://hostname/resource","categories":[],"tags":[]},{"title":"sqlite joins 子句结合查询","slug":"sqlite joins 子句结合查询","date":"2016-05-17T16:19:50.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2016/05/18/sqlite joins 子句结合查询/","link":"","permalink":"http://blog.panzhenglian.com/2016/05/18/sqlite joins 子句结合查询/","excerpt":"","text":"Sqlite JoinsSQLite 的 Joins 子句用于结合两个或多个数据库中表的记录。JOIN 是一种通过共同值来结合两个表中字段的手段.SQL 定义了三种主要类型的连接: 交叉连接 - CROSS JOIN 内连接 - INNER JOIN 外连接 - OUTER JOIN 假设我们有两张表table1:ID wid type---------- ---------- ----------1 11 n2 11 adj3 12 n4 12 adj5 13 adj6 13 n7 14 n8 14 n table2:id emid title ---------- ---------- ---------- 1 1 the process of becoming acid ... 2 1 being or containing an acid;... 3 1 being sour to the taste 4 2 any of various water-soluble... 5 2 street name for lysergic acid 6 3 harsh or corrosive in tone 7 3 being sour to the taste 8 3 having the characteristics...9 4 having no hue10 4 n 现在的需求是：查询table1中 wid＝12 的所有数据，并且获取所有 table1.id ＝ table2.emid 的数据；sqlite语句：select * from table1 join table2 in table1.id=table2.emid where wid = 12 ;","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.panzhenglian.com/tags/Android/"},{"name":"sqlite3","slug":"sqlite3","permalink":"http://blog.panzhenglian.com/tags/sqlite3/"}]},{"title":"tar 命令详解","slug":"tar 命令详解","date":"2016-05-15T16:42:14.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2016/05/16/tar 命令详解/","link":"","permalink":"http://blog.panzhenglian.com/2016/05/16/tar 命令详解/","excerpt":"","text":"-c: 建立压缩档案 -x：解压 -t：查看内容 -r：向压缩归档文件末尾追加文件 -u：更新原压缩包中的文件 这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个.下面的参数是根据需要在压缩或解压档案时可选的。 -z：有gzip属性的-j：有bz2属性的-Z：有compress属性的-v：显示所有过程-O：将文件解开到标准输出 参数-f是必须的 -f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。 tar -cf all.tar *.jpg 将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。tar -rf all.tar *.gif 将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。 tar -uf all.tar logo.gif 更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。 tar -tf all.tar 这条命令是列出all.tar包中所有文件，-t是列出文件的意思 tar -xf all.tar 这条命令是解出all.tar包中所有文件，-x是解开的意思 查看tar -tf aaa.tar.gz 在不解压的情况下查看压缩包的内容 压缩tar –cvf jpg.tar *.jpg 将目录里所有jpg文件打包成tar.jpg tar –czf jpg.tar.gz *.jpg 将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz tar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2tar –cZf jpg.tar.Z *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z 解压tar –xvf file.tar //解压 tar包tar -xzvf file.tar.gz //解压tar.gztar -xjvf file.tar.bz2 //解压 tar.bz2tar –xZvf file.tar.Z //解压tar.Z 总结*.tar 用 tar –xvf 解压*.gz 用 gzip -d或者gunzip 解压*.tar.gz和*.tgz 用 tar –xzf 解压*.bz2 用 bzip2 -d或者用bunzip2 解压*.tar.bz2用tar –xjf 解压*.Z 用 uncompress 解压*.tar.Z 用tar –xZf 解压","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.panzhenglian.com/tags/Linux/"}]},{"title":"Android  角落标签","slug":"Android 角落标签","date":"2016-05-09T16:34:58.000Z","updated":"2017-05-29T18:03:30.000Z","comments":true,"path":"2016/05/10/Android 角落标签/","link":"","permalink":"http://blog.panzhenglian.com/2016/05/10/Android 角落标签/","excerpt":"","text":"&lt;!--细则待整理--&gt;&lt;TextView android:id=\"@+id/is_listen\" android:layout_width=\"55dp\" android:layout_height=\"20dp\" android:layout_alignParentRight=\"true\" android:background=\"#0997C5\" android:gravity=\"center\" android:rotation=\"45\" android:text=\"听说\" android:textColor=\"@color/white\" android:textSize=\"12sp\" android:scaleX=\"0.6\" android:scaleY=\"0.6\" android:transformPivotX=\"0dp\" android:transformPivotY=\"0dp\" android:translationX=\"30.25dp\" android:translationY=\"-14.14dp\" /&gt;&lt;!-- translationY = width-(width²÷2 求平方) + translationX --&gt;&lt;!-- translationX = height²÷2 求平方 --&gt;","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.panzhenglian.com/tags/Android/"}]},{"title":"Android ping 命令获取连接速度","slug":"Android ping命令获取连接速度","date":"2016-05-09T16:28:14.000Z","updated":"2017-05-30T08:51:53.000Z","comments":true,"path":"2016/05/10/Android ping命令获取连接速度/","link":"","permalink":"http://blog.panzhenglian.com/2016/05/10/Android ping命令获取连接速度/","excerpt":"","text":"public class PingUtil&#123; /** * @param address 地址 * @return 根据地址，返回该地址ping速度，如果不可用，返回-1f */ private static float getSpeed(String address) &#123; address = address.replace(\"http://\", \"\"); address = address.replace(\"https://\", \"\"); address = address.replace(\"/\", \"\"); float retVal = -1f; try &#123; Runtime runtime = Runtime.getRuntime(); Process process = runtime.exec(\"/system/bin/ping -c \" + 5 + \" \" + address); int status = process.waitFor(); if (status != 0) &#123; //ping 失败 return -1f; &#125; BufferedReader buf = new BufferedReader(new InputStreamReader(process.getInputStream())); String str; //读出所有信息并显示 StringBuilder sb = new StringBuilder(); while ((str = buf.readLine()) != null) &#123; sb.append(str); &#125; String result = sb.toString(); int lastIndexOf = result.lastIndexOf('/'); if (lastIndexOf != -1) &#123; try &#123; result = result.substring(lastIndexOf + 1); result = result.replaceAll(\"ms\", \"\"); result = result.replaceAll(\" \", \"\"); retVal = Float.valueOf(result); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; buf.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return retVal; &#125;&#125;","categories":[],"tags":[{"name":"Android","slug":"Android","permalink":"http://blog.panzhenglian.com/tags/Android/"}]}]}